[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cloakpivot"
version = "0.1.0"
description = "PII masking/unmasking on top of DocPivot and Presidio with reversible transformations"
authors = [
    {name = "CloakPivot Team", email = "contact@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["pii", "privacy", "document", "masking", "presidio", "docpivot"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: Text Processing",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "docling>=2.50.0",
    "docling-core>=2.47.0",
    "docling-ibm-models>=3.9.1",
    "docling-parse>=4.2.3",
    "docpivot @ git+https://github.com/hernamesbarbara/docpivot.git@main",
    "presidio-analyzer>=2.2.0",
    "presidio-anonymizer>=2.2.0",
    "cryptography>=41.0.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
# Storage backend dependencies
s3 = [
    "boto3>=1.26.0",
]

gcs = [
    "google-cloud-storage>=2.10.0",
]

database = [
    "psycopg2-binary>=2.9.0",  # PostgreSQL support
    "sqlalchemy>=2.0.0",      # Optional ORM support
]

# Observability and monitoring dependencies
observability = [
    "structlog>=23.0.0",
    "prometheus-client>=0.19.0",
    "psutil>=5.9.0",
    "pyyaml>=6.0",  # Already in main deps but needed here too
]

# Combined storage backends
storage = [
    "cloakpivot[s3,gcs,database]",
]

dev = [
    "types-click",
    "types-psutil",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "types-PyYAML",
    "cloakpivot[storage,observability]",  # Include storage backends and observability in dev
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "hypothesis>=6.88.0",  # Property-based testing
    "psutil>=5.9.0",       # Performance monitoring
    "pytest-xdist>=3.0.0", # Parallel test execution
    "pytest-benchmark>=4.0.0", # Performance benchmarking
    "pytest-timeout>=2.1.0", # Test timeout support
]

[project.scripts]
cloakpivot = "cloakpivot.cli.main:main"

[project.entry-points."cloakpivot.plugins.strategies"]
# Strategy plugins can be registered here by external packages

[project.entry-points."cloakpivot.plugins.recognizers"]
# Recognizer plugins can be registered here by external packages

[project.entry-points."cloakpivot.storage.backends"]
# Storage backend plugins can be registered here by external packages
local = "cloakpivot.storage.backends.local:LocalStorage"
s3 = "cloakpivot.storage.backends.s3:S3Storage"
gcs = "cloakpivot.storage.backends.gcs:GCSStorage"
database = "cloakpivot.storage.backends.database:DatabaseStorage"

[project.urls]
"Homepage" = "https://github.com/example/cloakpivot"
"Bug Tracker" = "https://github.com/example/cloakpivot/issues"
"Documentation" = "https://cloakpivot.readthedocs.io"

[tool.setuptools.packages.find]
where = ["."]
include = ["cloakpivot*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
files = ["cloakpivot/cli"]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "presidio_analyzer.*",
    "presidio_anonymizer.*",
    "docpivot.*",
    "pytest_xdist.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "asyncio: marks tests as asyncio tests",
    "unit: marks tests as unit tests (fast, isolated component tests)",
    "integration: marks tests as integration tests (component interaction tests)",
    "e2e: marks tests as end-to-end tests (full workflow tests)",
    "golden: marks tests as golden file regression tests",
    "performance: marks tests as performance benchmark tests",
    "slow: marks tests as slow running tests (> 30 seconds)",
    "property: marks tests as property-based tests using Hypothesis",
]
# Test discovery
norecursedirs = [
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "docs",
    ".tox",
    ".git",
    "__pycache__"
]
# Timeout settings - requires pytest-timeout plugin
timeout = 300
timeout_method = "thread"

# Parallel execution configuration
# Use environment variables to control parallel execution:
# - PYTEST_WORKERS: explicit worker count override
# - PYTEST_DIST: distribution strategy (loadfile, loadscope, worksteal)
# - PYTEST_MAX_WORKERS: maximum worker limit
# Default behavior: auto-detect optimal worker count based on CPU cores

[tool.coverage.run]
source = ["cloakpivot"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
