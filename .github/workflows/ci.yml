name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Performance optimizations
  MODEL_SIZE: small
  PYTEST_FAST_MODE: true
  CLOAKPIVOT_USE_SINGLETON: true
  
  # Cache versioning for intelligent invalidation
  SPACY_CACHE_VERSION: v1
  HUGGINGFACE_CACHE_VERSION: v1
  MODEL_CACHE_VERSION: v2
  SPACY_VERSION: "3.7.0"

jobs:
  cache-setup:
    name: Setup Model Cache Keys
    runs-on: ubuntu-latest
    outputs:
      spacy-cache-key: ${{ steps.cache-keys.outputs.spacy-key }}
      huggingface-cache-key: ${{ steps.cache-keys.outputs.huggingface-key }}
      pip-cache-key: ${{ steps.cache-keys.outputs.pip-key }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate cache keys
      id: cache-keys
      run: |
        # Create deterministic cache keys based on dependencies and versions
        PYPROJECT_HASH=$(sha256sum pyproject.toml | cut -d' ' -f1 | head -c 8)
        
        SPACY_KEY="spacy-${{ env.SPACY_CACHE_VERSION }}-${{ env.SPACY_VERSION }}-${PYPROJECT_HASH}"
        HF_KEY="huggingface-${{ env.HUGGINGFACE_CACHE_VERSION }}-${PYPROJECT_HASH}"
        PIP_KEY="pip-${PYPROJECT_HASH}"
        
        echo "spacy-key=$SPACY_KEY" >> $GITHUB_OUTPUT
        echo "huggingface-key=$HF_KEY" >> $GITHUB_OUTPUT  
        echo "pip-key=$PIP_KEY" >> $GITHUB_OUTPUT
        
        echo "Generated cache keys:"
        echo "  spaCy: $SPACY_KEY"
        echo "  HuggingFace: $HF_KEY"
        echo "  Pip: $PIP_KEY"

  test-matrix:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: cache-setup
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
        include:
          # Add specific OS combinations for comprehensive testing
          - python-version: "3.11"
            os: macos-latest
          - python-version: "3.11" 
            os: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    # Multi-level caching strategy for optimal hit rates
    - name: Cache spaCy models
      id: cache-spacy
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/spacy
          ~/spacy_models
        key: ${{ needs.cache-setup.outputs.spacy-cache-key }}-${{ matrix.python-version }}-${{ matrix.os }}
        restore-keys: |
          ${{ needs.cache-setup.outputs.spacy-cache-key }}-${{ matrix.python-version }}-
          ${{ needs.cache-setup.outputs.spacy-cache-key }}-
          spacy-${{ env.SPACY_CACHE_VERSION }}-${{ env.SPACY_VERSION }}-

    - name: Cache HuggingFace models
      id: cache-huggingface
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/huggingface/transformers
          ~/.cache/huggingface/datasets
          ~/.cache/huggingface/hub
        key: ${{ needs.cache-setup.outputs.huggingface-cache-key }}-${{ matrix.python-version }}-${{ matrix.os }}
        restore-keys: |
          ${{ needs.cache-setup.outputs.huggingface-cache-key }}-${{ matrix.python-version }}-
          ${{ needs.cache-setup.outputs.huggingface-cache-key }}-
          huggingface-${{ env.HUGGINGFACE_CACHE_VERSION }}-

    - name: Cache pip packages
      id: cache-pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ needs.cache-setup.outputs.pip-cache-key }}-${{ matrix.python-version }}-${{ matrix.os }}
        restore-keys: |
          ${{ needs.cache-setup.outputs.pip-cache-key }}-${{ matrix.python-version }}-
          ${{ needs.cache-setup.outputs.pip-cache-key }}-
          pip-${{ matrix.python-version }}-

    - name: Install system dependencies
      run: |
        # Ubuntu system dependencies
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential
        fi

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Verify installation
      run: |
        pip list
        python -c "import cloakpivot; print(f'CloakPivot version: {cloakpivot.__version__}')"

    - name: Run linting
      run: |
        ruff check cloakpivot tests
        ruff format --check cloakpivot tests

    - name: Run type checking
      run: |
        # TODO: Remove lenient flags as type annotations improve
        mypy cloakpivot --ignore-missing-imports --no-strict-optional

    - name: Setup models with intelligent caching
      run: |
        # Use intelligent model setup script with caching awareness
        python scripts/setup-models.py \
          --model-size ${{ env.MODEL_SIZE }} \
          --cache-hit ${{ steps.cache-spacy.outputs.cache-hit }} \
          --verify-installation

    - name: Run tests
      run: |
        # Fast mode for CI - focus on core functionality
        pytest -xvs \
          --tb=short \
          --cov=cloakpivot \
          --cov-report=xml \
          --cov-report=term-missing \
          -m "not slow" \
          --maxfail=5

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  test-comprehensive:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: cache-setup
    # Only run on main branch merges
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    # Use same caching strategy for comprehensive tests
    - name: Cache spaCy models (comprehensive)
      id: cache-spacy-comprehensive
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/spacy
          ~/spacy_models
        key: ${{ needs.cache-setup.outputs.spacy-cache-key }}-comprehensive-3.11-ubuntu-latest
        restore-keys: |
          ${{ needs.cache-setup.outputs.spacy-cache-key }}-3.11-
          ${{ needs.cache-setup.outputs.spacy-cache-key }}-
          spacy-${{ env.SPACY_CACHE_VERSION }}-${{ env.SPACY_VERSION }}-

    - name: Cache HuggingFace models (comprehensive)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/huggingface/transformers
          ~/.cache/huggingface/datasets
          ~/.cache/huggingface/hub
        key: ${{ needs.cache-setup.outputs.huggingface-cache-key }}-comprehensive-3.11-ubuntu-latest
        restore-keys: |
          ${{ needs.cache-setup.outputs.huggingface-cache-key }}-3.11-
          ${{ needs.cache-setup.outputs.huggingface-cache-key }}-
          huggingface-${{ env.HUGGINGFACE_CACHE_VERSION }}-

    - name: Cache pip packages (comprehensive)
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ needs.cache-setup.outputs.pip-cache-key }}-comprehensive-3.11-ubuntu-latest
        restore-keys: |
          ${{ needs.cache-setup.outputs.pip-cache-key }}-3.11-
          ${{ needs.cache-setup.outputs.pip-cache-key }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Setup comprehensive model set
      run: |
        # Download all model sizes for comprehensive testing
        python scripts/setup-models.py \
          --model-size large \
          --cache-hit ${{ steps.cache-spacy-comprehensive.outputs.cache-hit }} \
          --verify-installation

    - name: Run comprehensive tests
      env:
        MODEL_SIZE: medium
        PYTEST_FAST_MODE: false
      run: |
        pytest -xvs \
          --tb=short \
          --cov=cloakpivot \
          --cov-report=xml \
          --cov-report=term-missing \
          --maxfail=10

    - name: Run performance tests
      env:
        MODEL_SIZE: small
      run: |
        pytest -xvs -m "performance" \
          --tb=short \
          --benchmark-only \
          --benchmark-sort=mean

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install bandit
      run: pip install bandit[toml]

    - name: Run security scan
      run: |
        bandit -r cloakpivot/ -f json -o security-report.json --skip B101,B601 --exclude tests/
        bandit -r cloakpivot/ -f txt --skip B101,B601 --exclude tests/

    - name: Upload security scan results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: security-report.json