name: Performance Monitoring

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Performance optimizations matching main CI
  MODEL_SIZE: small
  PYTEST_FAST_MODE: true
  CLOAKPIVOT_USE_SINGLETON: true
  
  # Cache versioning for intelligent invalidation
  SPACY_CACHE_VERSION: v1
  HUGGINGFACE_CACHE_VERSION: v1
  MODEL_CACHE_VERSION: v2
  SPACY_VERSION: "3.7.0"

jobs:
  performance-baseline:
    name: Performance Baseline Measurement
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        # Fetch history for comparison
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    # Use same cache strategy as main CI for consistency
    - name: Generate cache keys
      id: cache-keys
      run: |
        PYPROJECT_HASH=$(sha256sum pyproject.toml | cut -d' ' -f1 | head -c 8)
        
        SPACY_KEY="spacy-${{ env.SPACY_CACHE_VERSION }}-${{ env.SPACY_VERSION }}-${PYPROJECT_HASH}"
        HF_KEY="huggingface-${{ env.HUGGINGFACE_CACHE_VERSION }}-${PYPROJECT_HASH}"
        PIP_KEY="pip-${PYPROJECT_HASH}"
        
        echo "spacy-key=$SPACY_KEY" >> $GITHUB_OUTPUT
        echo "huggingface-key=$HF_KEY" >> $GITHUB_OUTPUT  
        echo "pip-key=$PIP_KEY" >> $GITHUB_OUTPUT

    - name: Cache spaCy models
      id: cache-spacy
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/spacy
          ~/spacy_models
        key: ${{ steps.cache-keys.outputs.spacy-key }}-performance-3.11-ubuntu-latest
        restore-keys: |
          ${{ steps.cache-keys.outputs.spacy-key }}-3.11-
          ${{ steps.cache-keys.outputs.spacy-key }}-

    - name: Cache HuggingFace models
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/huggingface/transformers
          ~/.cache/huggingface/datasets
          ~/.cache/huggingface/hub
        key: ${{ steps.cache-keys.outputs.huggingface-key }}-performance-3.11-ubuntu-latest
        restore-keys: |
          ${{ steps.cache-keys.outputs.huggingface-key }}-3.11-
          ${{ steps.cache-keys.outputs.huggingface-key }}-

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ steps.cache-keys.outputs.pip-key }}-performance-3.11-ubuntu-latest
        restore-keys: |
          ${{ steps.cache-keys.outputs.pip-key }}-3.11-
          ${{ steps.cache-keys.outputs.pip-key }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        # Install pytest-benchmark for performance testing
        pip install pytest-benchmark

    - name: Setup models with intelligent caching
      run: |
        python scripts/setup-models.py \
          --model-size ${{ env.MODEL_SIZE }} \
          --cache-hit ${{ steps.cache-spacy.outputs.cache-hit }} \
          --verify-installation

    - name: Download baseline data
      if: github.event_name == 'pull_request'
      run: |
        # Download baseline from main branch artifact
        gh run download --name performance-baseline --dir baseline-data || echo "No baseline found"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run performance benchmarks
      run: |
        # Run comprehensive performance tests with benchmarking
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=current-performance.json \
          --benchmark-sort=mean \
          --tb=short \
          -v

    - name: Analyze performance regression
      if: github.event_name == 'pull_request'
      run: |
        python scripts/performance-regression-analysis.py \
          --baseline baseline-data/performance-baseline.json \
          --current current-performance.json \
          --threshold 0.10 \
          --output regression-report.md

    - name: Store baseline performance
      if: github.ref == 'refs/heads/main'
      run: |
        # Store current performance as new baseline
        cp current-performance.json performance-baseline.json

    - name: Upload performance artifacts
      uses: actions/upload-artifact@v3
      with:
        name: performance-baseline
        path: |
          performance-baseline.json
          current-performance.json
          regression-report.md
        retention-days: 30

    - name: Comment PR with performance analysis
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          try {
            const report = fs.readFileSync('regression-report.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸ“Š Performance Analysis\n\n${report}`
            });
          } catch (error) {
            console.log('No performance report found or error commenting:', error);
          }

  continuous-performance-monitoring:
    name: Continuous Performance Tracking
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    # Use same cache strategy for consistency
    - name: Generate cache keys
      id: cache-keys
      run: |
        PYPROJECT_HASH=$(sha256sum pyproject.toml | cut -d' ' -f1 | head -c 8)
        
        SPACY_KEY="spacy-${{ env.SPACY_CACHE_VERSION }}-${{ env.SPACY_VERSION }}-${PYPROJECT_HASH}"
        HF_KEY="huggingface-${{ env.HUGGINGFACE_CACHE_VERSION }}-${PYPROJECT_HASH}"
        PIP_KEY="pip-${PYPROJECT_HASH}"
        
        echo "spacy-key=$SPACY_KEY" >> $GITHUB_OUTPUT
        echo "huggingface-key=$HF_KEY" >> $GITHUB_OUTPUT  
        echo "pip-key=$PIP_KEY" >> $GITHUB_OUTPUT

    - name: Cache spaCy models (extended)
      id: cache-spacy-extended
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/spacy
          ~/spacy_models
        key: ${{ steps.cache-keys.outputs.spacy-key }}-extended-3.11-ubuntu-latest
        restore-keys: |
          ${{ steps.cache-keys.outputs.spacy-key }}-3.11-
          ${{ steps.cache-keys.outputs.spacy-key }}-

    - name: Cache HuggingFace models (extended)
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/huggingface/transformers
          ~/.cache/huggingface/datasets
          ~/.cache/huggingface/hub
        key: ${{ steps.cache-keys.outputs.huggingface-key }}-extended-3.11-ubuntu-latest
        restore-keys: |
          ${{ steps.cache-keys.outputs.huggingface-key }}-3.11-
          ${{ steps.cache-keys.outputs.huggingface-key }}-

    - name: Cache pip packages (extended)
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ steps.cache-keys.outputs.pip-key }}-extended-3.11-ubuntu-latest
        restore-keys: |
          ${{ steps.cache-keys.outputs.pip-key }}-3.11-
          ${{ steps.cache-keys.outputs.pip-key }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"
        pip install pytest-benchmark

    - name: Setup extended model set
      run: |
        # Use medium model size for main branch comprehensive testing
        python scripts/setup-models.py \
          --model-size medium \
          --cache-hit ${{ steps.cache-spacy-extended.outputs.cache-hit }} \
          --verify-installation

    - name: Run extended performance suite
      env:
        MODEL_SIZE: medium
        PYTEST_FAST_MODE: false
      run: |
        # Extended performance monitoring for main branch
        pytest tests/performance/ \
          --benchmark-only \
          --benchmark-json=extended-performance.json \
          --benchmark-histogram=performance-histograms \
          --tb=short \
          -v

    - name: Generate performance trends
      run: |
        python scripts/generate-performance-trends.py \
          --performance-data extended-performance.json \
          --output-dir performance-trends/

    - name: Store performance data
      run: |
        # Store in performance database or artifact storage
        mkdir -p performance-history/$(date +%Y%m%d)
        cp extended-performance.json performance-history/$(date +%Y%m%d)/

    - name: Upload extended performance data
      uses: actions/upload-artifact@v3
      with:
        name: extended-performance-data
        path: |
          extended-performance.json
          performance-trends/
          performance-history/
        retention-days: 30